#!/bin/bash
#
# DESCRIPTION:
#
#   Set the bash prompt according to:
#    * ~~the active virtualenv~~
#    * the branch/status of the current git repository
#    * the return value of the previous command
#
# USAGE:
#
#   1. Save this file as ~/.bash_prompt
#   2. Add the following line to the end of your ~/.bashrc or ~/.bash_profile:
#        . ~/.bash_prompt
#
# LINEAGE:
#
#   Based on work by woods
#
#   https://gist.github.com/31967

# The various escape codes that we can use to color our prompt.
       BLACK="\[\033[0;30m\]"
        BLUE="\[\033[0;34m\]"
       GREEN="\[\033[0;32m\]"
        CYAN="\[\033[0;36m\]"
         RED="\[\033[0;31m\]"
      PURPLE="\[\033[0;35m\]"
       BROWN="\[\033[0;33m\]"
  LIGHT_GRAY="\[\033[0;37m\]"
   DARK_GRAY="\[\033[1;30m\]"
  LIGHT_BLUE="\[\033[1;34m\]"
 LIGHT_GREEN="\[\033[1;32m\]"
  LIGHT_CYAN="\[\033[1;36m\]"
   LIGHT_RED="\[\033[1;31m\]"
LIGHT_PURPLE="\[\033[1;35m\]"
      YELLOW="\[\033[1;33m\]"
       WHITE="\[\033[1;37m\]"
  COLOR_NONE="\[\e[0m\]"

# Detect whether the current directory is a git repository.
function is_git_repository {
  git branch > /dev/null 2>&1
}

# Determine the branch/state information for this git repository.
function set_git_branch {
  # Capture the output of the "git status" command.
  git_status="$(git status 2> /dev/null)"

  # Set color based on clean/staged/dirty.
  if [[ ${git_status} =~ "working tree clean" ]]; then
    state=""
  elif [[ ${git_status} =~ "Changes to be committed" ]]; then
    state="${YELLOW}X"
  else
    state="${LIGHT_RED}X"
  fi

  # Set arrow icon based on status against remote.
  if [[ ${git_status} =~ "ahead" ]]; then
    remote="↑"
  elif [[ ${git_status} =~ "behind" ]]; then
    remote="↓"
  elif [[ ${git_status} =~ "diverged" ]]; then
    remote="↕"
  else
    remote=""
  fi

  # Get the name of the branch.
  branch_pattern="On branch ([^${IFS}]*)"
  if [[ ${git_status} =~ ${branch_pattern} ]]; then
    branch=${BASH_REMATCH[1]}
  fi

  # Set the final branch string.
  BRANCH="${GREEN}(${branch})${state}${YELLOW}${remote}${COLOR_NONE} "
}

# Return the prompt symbol to use, colorized based on the return value of the
# previous command.
function set_prompt_symbol {
  if test $1 -eq 0 ; then
      PROMPT_SYMBOL="${LIGHT_GREEN}λ${COLOR_NONE}"
  else
      PROMPT_SYMBOL="${LIGHT_RED}λ${COLOR_NONE}"
  fi
}

# Set the full bash prompt.
function set_bash_prompt {
  # Set the PROMPT_SYMBOL variable. We do this first so we don't lose the
  # return value of the last command.
  set_prompt_symbol $?

  # Set the BRANCH variable.
  if is_git_repository ; then
    set_git_branch
  else
    BRANCH=''
  fi

  # Set the bash prompt variable.
  PS1="${LIGHT_BLUE}\W${COLOR_NONE} ${BRANCH}${PROMPT_SYMBOL} "
}

# # Set the X11 window title
# function set_window_title {
#   echo -ne "\033]0;${USER}@${HOSTNAME}:${PWD}\007"
# }

# Tell bash to execute this function just before displaying its prompt.
# PROMPT_COMMAND='set_window_title && set_bash_prompt'
PROMPT_COMMAND='set_bash_prompt'
